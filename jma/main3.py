{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'apscheduler'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[2], line 4\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mrequests\u001b[39;00m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mflet\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mft\u001b[39;00m\n\u001b[0;32m----> 4\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mapscheduler\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mschedulers\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mbackground\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m BackgroundScheduler\n\u001b[1;32m      5\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mdatetime\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m datetime, timedelta\n\u001b[1;32m      7\u001b[0m \u001b[38;5;66;03m# SQLiteのDBファイル\u001b[39;00m\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'apscheduler'"
     ]
    }
   ],
   "source": [
    "import sqlite3\n",
    "import requests\n",
    "import flet as ft\n",
    "from apscheduler.schedulers.background import BackgroundScheduler\n",
    "from datetime import datetime, timedelta\n",
    "\n",
    "# SQLiteのDBファイル\n",
    "db_filename = 'weather_forecast.db'\n",
    "\n",
    "# APIから地域データを取得\n",
    "area_json = requests.get(\"http://www.jma.go.jp/bosai/common/const/area.json\").json()\n",
    "\n",
    "def get_weather_data(region_code: str):\n",
    "    \"\"\"指定された地域コードに対して天気予報を取得する\"\"\"\n",
    "    weather_url = f\"https://www.jma.go.jp/bosai/forecast/data/forecast/{region_code}.json\"\n",
    "    response = requests.get(weather_url)\n",
    "    \n",
    "    # APIレスポンスの確認\n",
    "    if response.status_code != 200:\n",
    "        print(f\"Weather data for {region_code} not found!\")\n",
    "        return {}\n",
    "    \n",
    "    return response.json()\n",
    "\n",
    "def save_weather_to_db(region_id, weather_data):\n",
    "    \"\"\"天気データをSQLiteデータベースに保存する\"\"\"\n",
    "    # DB接続\n",
    "    con = sqlite3.connect(db_filename)\n",
    "    cur = con.cursor()\n",
    "    \n",
    "    # テーブル作成（なければ作成）\n",
    "    cur.execute(\"\"\"\n",
    "    CREATE TABLE IF NOT EXISTS weather_forecast (\n",
    "        region_id TEXT,\n",
    "        area_name TEXT,\n",
    "        date TEXT,\n",
    "        weather TEXT,\n",
    "        wind TEXT,\n",
    "        wave TEXT\n",
    "    )\n",
    "    \"\"\")\n",
    "    \n",
    "    # 時間軸のデータを取り出して保存\n",
    "    time_series = weather_data[0].get('timeSeries', [])\n",
    "    if time_series:\n",
    "        time_defines = time_series[0].get(\"timeDefines\", [])\n",
    "        areas = time_series[0].get(\"areas\", [])\n",
    "        \n",
    "        for area in areas:\n",
    "            area_name = area[\"area\"][\"name\"]\n",
    "            weather_codes = area.get(\"weatherCodes\", [\"情報なし\"])\n",
    "            weathers = area.get(\"weathers\", [\"情報なし\"])\n",
    "            winds = area.get(\"winds\", [\"情報なし\"])\n",
    "            waves = area.get(\"waves\", [\"情報なし\"])\n",
    "            \n",
    "            for i in range(len(time_defines)):\n",
    "                weather = weathers[i] if i < len(weathers) else \"情報なし\"\n",
    "                wind = winds[i] if i < len(winds) else \"情報なし\"\n",
    "                wave = waves[i] if i < len(waves) else \"情報なし\"\n",
    "                date = time_defines[i] if i < len(time_defines) else \"情報なし\"\n",
    "                \n",
    "                # DBに挿入\n",
    "                cur.execute(\"\"\"\n",
    "                INSERT INTO weather_forecast (region_id, area_name, date, weather, wind, wave)\n",
    "                VALUES (?, ?, ?, ?, ?, ?)\n",
    "                \"\"\", (region_id, area_name, date, weather, wind, wave))\n",
    "    \n",
    "    # コミットして閉じる\n",
    "    con.commit()\n",
    "    con.close()\n",
    "\n",
    "def drop_weather_table():\n",
    "    \"\"\"アプリケーション終了時にテーブルを削除\"\"\"\n",
    "    con = sqlite3.connect(db_filename)\n",
    "    cur = con.cursor()\n",
    "    cur.execute(\"DROP TABLE IF EXISTS weather_forecast\")\n",
    "    con.commit()\n",
    "    con.close()\n",
    "\n",
    "def scheduled_task():\n",
    "    \"\"\"毎朝9時に天気データを更新\"\"\"\n",
    "    print(\"Updating weather data...\")\n",
    "    for region_id, region_info in area_json[\"centers\"].items():\n",
    "        for child_id in region_info[\"children\"]:\n",
    "            weather_data = get_weather_data(child_id)\n",
    "            if weather_data:\n",
    "                save_weather_to_db(child_id, weather_data)\n",
    "\n",
    "def main(page: ft.Page):\n",
    "    # スケジューラーをセットアップ\n",
    "    scheduler = BackgroundScheduler()\n",
    "    scheduler.add_job(scheduled_task, 'interval', days=1, start_date=datetime.combine(datetime.today(), datetime.min.time()) + timedelta(days=1), hours=9, minutes=0)\n",
    "    scheduler.start()\n",
    "\n",
    "    # メニューバーを追加\n",
    "    page.add(\n",
    "        ft.AppBar(\n",
    "            title=ft.Text(\"天気予報\", color=ft.colors.WHITE),\n",
    "            actions=[\n",
    "                ft.IconButton(ft.icons.SETTINGS, on_click=lambda e: print(\"Settings clicked\"))\n",
    "            ],\n",
    "            bgcolor=ft.colors.BLUE,  # AppBarの背景色を青に変更\n",
    "        )\n",
    "    )\n",
    "\n",
    "    # 右側の空白部分に天気予報情報を表示するためのコンテナ\n",
    "    weather_details = ft.ListView(  # ListViewを使用してスクロール可能にする\n",
    "        spacing=10,  # 各項目の間隔\n",
    "        width=600,  # 幅を指定\n",
    "        height=500,  # 高さを指定してスクロールを有効にする\n",
    "    )\n",
    "\n",
    "    # 地域名リストを作成\n",
    "    controls = []\n",
    "\n",
    "    # centers の中から親地域名を抽出し、その下の県と地域を表示\n",
    "    for region_id, region_info in area_json[\"centers\"].items():\n",
    "        parent_region_name = region_info[\"name\"]\n",
    "        \n",
    "        # 県ごとのリストを作成\n",
    "        prefecture_controls = []\n",
    "\n",
    "        # 各県に対応する地域データを取得\n",
    "        for child_id in region_info[\"children\"]:\n",
    "            child_region_name = area_json[\"offices\"].get(child_id, {}).get(\"name\", f\"Unknown Region {child_id}\")\n",
    "            \n",
    "            # さらに県の下に細分化された地域のリストを作成\n",
    "            subregion_controls = []\n",
    "\n",
    "            # 子地域のリストアイテムを作成\n",
    "            # 子地域コード（例えば '011000', '012000' など）に対応する天気情報を取得\n",
    "            weather_data = get_weather_data(child_id)\n",
    "\n",
    "            # 天気情報を確認\n",
    "            if weather_data:\n",
    "                # 天気データをDBに保存\n",
    "                save_weather_to_db(child_id, weather_data)\n",
    "\n",
    "                # 保存した天気情報を表示\n",
    "                weather_info = \"情報がありません\"\n",
    "                forecast = weather_data[0].get('timeSeries', [{}])[0].get('areas', [{}])[0].get('weatherCodes', [])\n",
    "                if forecast:\n",
    "                    weather_info = forecast[0]  # 予報コードを表示\n",
    "            else:\n",
    "                weather_info = \"情報がありません\"\n",
    "\n",
    "            # 子地域のリストアイテムを作成\n",
    "            subregion_controls.append(\n",
    "                ft.ListTile(\n",
    "                    title=ft.Text(child_region_name),\n",
    "                    subtitle=ft.Text(f\"天気予報: {weather_info}\"),\n",
    "                    on_click=lambda e, region_id=child_id, region_name=child_region_name: show_weather_details(region_id, region_name, weather_details)\n",
    "                )\n",
    "            )\n",
    "\n",
    "            # 県ごとのExpansionTileに子地域を追加\n",
    "            prefecture_controls.append(\n",
    "                ft.Container(\n",
    "                    bgcolor=ft.colors.GREY,  # 背景色を灰色に設定\n",
    "                    content=ft.ExpansionTile(\n",
    "                        title=ft.Text(child_region_name),  # 県名をタイトルとして表示\n",
    "                        subtitle=ft.Text(\"地域を表示\"),\n",
    "                        affinity=ft.TileAffinity.PLATFORM,\n",
    "                        maintain_state=True,\n",
    "                        collapsed_text_color=ft.colors.WHITE,  # フォントカラーを白に変更（展開時）\n",
    "                        text_color=ft.colors.WHITE,  # フォントカラーを白に変更（展開時）\n",
    "                        controls=subregion_controls,  # 子地域（細分化された地域）のリストを追加\n",
    "                    )\n",
    "                )\n",
    "            )\n",
    "\n",
    "        # 親地域をさらにExpansionTileとして表示し、その中に県ごとのExpansionTileを追加\n",
    "        controls.append(\n",
    "            ft.Container(\n",
    "                bgcolor=ft.colors.GREY,  # 背景色を灰色に設定\n",
    "                content=ft.ExpansionTile(\n",
    "                    title=ft.Text(parent_region_name),  # 親地域名をタイトルとして表示\n",
    "                    subtitle=ft.Text(\"県と地域を表示\"),\n",
    "                    affinity=ft.TileAffinity.PLATFORM,\n",
    "                    maintain_state=True,\n",
    "                    collapsed_text_color=ft.colors.WHITE,  # フォントカラーを白に変更（展開時）\n",
    "                    text_color=ft.colors.BLACK,  # フォントカラーを白に変更（展開時）\n",
    "                    controls=prefecture_controls,  # 県ごとのリストを追加\n",
    "                ),\n",
    "                width=200,  # 幅を200pxに設定（短く）\n",
    "                alignment=ft.alignment.top_left,  # 左寄せに配置\n",
    "            )\n",
    "        )\n",
    "\n",
    "    # `Row` レイアウトで左半分にコンテンツを表示、右半分に詳細情報を表示する\n",
    "    page.add(\n",
    "        ft.Row(\n",
    "            controls=[\n",
    "                ft.Column(\n",
    "                    controls=controls,  # 左側にExpansionTileを追加したリスト\n",
    "                    expand=True,  # 左側を拡張してスペースを取る\n",
    "                    scroll=True  # 左側にスクロールを有効化\n",
    "                ),\n",
    "                ft.Container(\n",
    "                    width=600,  # 右側の天気予報詳細部分の幅を指定\n",
    "                    content=weather_details  # 右側に天気予報の詳細を表示\n",
    "                )\n",
    "            ],\n",
    "            expand=True  # 全体的に広げる\n",
    "        )\n",
    "    )\n",
    "\n",
    "    # 日付選択用のフィルタ\n",
    "    date_picker = ft.DatePicker(on_change=lambda e: show_weather_by_date(e.control.value, weather_details))\n",
    "    page.add(date_picker)\n",
    "\n",
    "    # アプリケーション終了時にテーブルを削除するイベントを追加\n",
    "    page.on_page_close = lambda _: drop_weather_table()\n",
    "\n",
    "def show_weather_by_date(selected_date, weather_details):\n",
    "    \"\"\"選択された日付の天気予報を表示\"\"\"\n",
    "    con = sqlite3.connect('weather_forecast.db')\n",
    "    cur = con.cursor()\n",
    "    cur.execute(\"\"\"\n",
    "    SELECT DISTINCT * FROM weather_forecast WHERE date = ?\n",
    "    \"\"\", (selected_date,))\n",
    "    rows = cur.fetchall()\n",
    "\n",
    "    # 詳細情報を表示\n",
    "    detailed_info = []\n",
    "    if rows:\n",
    "        for row in rows:\n",
    "            detailed_info.append(f\"地域: {row[1]}\")\n",
    "            detailed_info.append(f\"日時: {row[2]}\")\n",
    "            detailed_info.append(f\"天気: {row[3]}\")\n",
    "            detailed_info.append(f\"風: {row[4]}\")\n",
    "            detailed_info.append(f\"波: {row[5]}\")\n",
    "            detailed_info.append(\"-\" * 30)\n",
    "    else:\n",
    "        detailed_info.append(\"天気情報が見つかりません。\")\n",
    "\n",
    "    weather_details.controls = [ft.Container(\n",
    "        content=ft.Column([ft.Text(info) for info in detailed_info]),\n",
    "        bgcolor=ft.colors.BLACK,  # 背景色を設定\n",
    "        padding=10  # パディングを追加\n",
    "    )]\n",
    "    weather_details.update()\n",
    "\n",
    "# Fletアプリケーションを実行\n",
    "ft.app(main)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
